#!/usr/bin/perl
# 20171026 - TRCM - Playing with threads, using the map method
# 20171031 - TRCM - Use worker-thread model
use strict;
use warnings;
use threads;
use threads::shared;
use Thread::Queue;
　
# Number of worker threads is 2, unless we supply an argument
my $nthreads = $ARGV[0] ? defined($ARGV[0]) : 2;
　
my $process_q = Thread::Queue->new();
my $failed_q  = Thread::Queue->new();
　
# Get some data about current user sessions, our aim is to transform
# the userids therein into their fullnames via execution of
# 'adquery user $userid' run in parallel threads for each userid.
my @whodata = map {
        chomp $_;
        my ($userid,$pty,$host,$idle) = split(/\s+/,$_,4);
        ("$userid,$pty,$host,$idle");
    } `who -uH|awk '/^[a-z][0-9]*/ {print \$1,\$2,\$NF,\$(NF-2)}'`;
　
# Setup a hash to share with the threads so each can write back their results
my %users :shared;
　
# Fill hash with userIDs as keys (and by doing so, get a unique list)
%users = map { (split(/,/,$_))[0] => undef } @whodata;
　
# Put the (unique) userIDs into our queue to process
$process_q->enqueue(keys %users);
　
# End the process queue (so dequeue() returns undefined when queue emptied,
# and therefore worker threads will exit their while loops)
if ($Thread::Queue::VERSION ge "3.01") {
    $process_q->end();
} else {
    $process_q->enqueue(undef) for ( 1 .. $nthreads );
}
　
# Start the threads working on the process queue
threads->create( \&worker ) for ( 1 .. $nthreads );
　
# Wait for threads to finish
$_->join() for ( threads->list() );
　
# Collate errors
while ( my $user = $failed_q->dequeue_nb() ) {
    # dequeue_nb = Return items from the head of a queue with no blocking
    print "<!> adquery failed to resolve userid : $user\n";
}
　
# Print the 'who' data, with the thread-found-fullnames, sorted by name
foreach my $line (sort {$users{(split(/,/,$a))[0]}{'FN'} cmp $users{(split(/,/,$b))[0]}{'FN'}} @whodata) {
    my ($userid,$pty,$host,$idle) = split(/,/,$line,4);
    printf "%-9s %-24s %-7s %-5s %s\n",$userid,$users{$userid}{'FN'},$pty,$idle,$host;
}
　
# The worker thread
sub worker {
    while ( my $userid=$process_q->dequeue() ) {
　
        my $fullname=`adquery user $userid 2>/dev/null`;
        if ($?) {
            my $exitcode = $? >> 8;  # Exit code of the subprocess
            my $exitsig  = $? & 127; # Which signal if any the process died from
            my $exitcore = $? & 128; # Was there a coredump?
            #print threads->self()->tid() . ": failed resolving $userid (adquery : $exitcode)\n";
            $failed_q->enqueue($userid);
            $fullname = "UNKNOWN";
        } else {
            $fullname = (split(/:/,$fullname))[4];
        }
　
        # Drop case to lower, then upper for first letter of each word
        $fullname =~ s/([\w']+)/\u\L$1/g;
        $fullname = $userid if ($fullname eq "");
　
        # Share any newly created references before assigning to them
        $users{$userid}=&share({});
        $users{$userid}{'FN'}=&share({});
　
        # Set advisory lock, so other threads are blocked when attempting to gain
        # a lock for this shared variable
        #
        # Note : We can only lock the actual shared hash, so first must deref!
        my $subhash = $users{$userid}->{'FN'};
        lock($subhash);
        #
        # (Pointless in these cases as our threads are working on unique keys)
　
        $users{$userid}{'FN'}=$fullname;
    }
}
# lock has gone out of scope here (unlocked!)
