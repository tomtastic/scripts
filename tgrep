#!/bin/bash
# Tom Matthews 29/5/2008
# Like the nice AIX grep which can return paragraphs
# Requires a modern awk,... and perl.

function error_exit {
        print -u2 "$*"
        exit 1
}

function highlight {
    # Foreground : 1;31 : bold red
    #              1;32 : bold green
    #              1;33 : yellow
    #              1;34 : bold blue
    perl -pe "s/$@/\e[1;31m$&\e[0m/gi"
}

function tgrep_file {
   out=$($AWK 'BEGIN { RS=""; ORS="\n\n" };
      #tolower($0) ~ /'"$word"'/  { print "---[" FILENAME "]-------------\n" $0 }
      tolower($0) ~ /'"$word"'/  { print $0 }
      ' ${file} | highlight "$word")
   if [[ -z ${out} ]]; then
       echo "$word not found!"
       exit 1
   else
       echo "${out}"
   fi
}

function tgrep_pipe {
   out=$($AWK 'BEGIN { RS=""; ORS="\n\n" };
      tolower($0) ~ /'"$word"'/  { print $0 }
      ' ${file} | highlight "$word")
   if [[ -z ${out} ]]; then
       echo "$word not found!"
       exit 1
   else
       echo "${out}"
   fi
}

# Lets pick the best tools for the job
if [[ `uname -s` = "Darwin" ]]; then
   AWK="/usr/bin/awk"
   colour_flag=1
else
   if [[ -x /usr/bin/nawk ]]; then
      AWK="/usr/bin/nawk"
   elif [[ -x /usr/bin/gawk ]]; then
      AWK="/usr/bin/gawk"
   else error_exit "No modern awk found, cannot continue."
   fi
fi

[ $# -eq 0 ] && error_exit "USAGE :  $0 <pattern> <file>"
word=$1
file=$2
if [ -t 0 ]; then
    [ $# -lt 2 ] && file="scratch"
    [ ! -f $2 ] && error_exit "File $2 does not exist"
    tgrep_file
else
    tgrep_pipe
fi


