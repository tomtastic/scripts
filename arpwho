#!/bin/bash
# 20190509 - TRCM - Show the ARP table, appending resolved hostnames and MAC vendors

function early_exit() {
    case $(uname -s) in
        "SunOS") echo "SunOS BASH is too old, bailing..."; exit 1;;
        "Darwin") echo "Darwin BASH is too old, bailing..."; exit 1;;
        *) ;;
    esac
}

function die() {
    echo " ! Failed"
    echo " [DEBUG] : arp_table : ${#arp_table[@]}"
    echo " [DEBUG] : ip_to_name : ${#ip_to_name[@]}"
    echo " [DEBUG] : smac_to_vendor : ${#smac_to_vendor[@]}"
    exit 1
}

function get_vendor_file() {
    # Checks a few paths for the OUI file, or downloads it to users home directory
    # Returns path to file
    local OUI_URL="http://standards-oui.ieee.org/oui/oui.txt"
    local OUI_PATHS=("$HOME" "/var/lib/ieee-data" "/tmp")
    local OUI='oui.txt'
    local CURL_OPTS="-L --progress-bar --connect-timeout 3 --url ${OUI_URL}"
    for dir in "${OUI_PATHS[@]}"; do
        if [[ -f ${dir}/${OUI} ]]; then
            OUI="${dir}/${OUI}"
            break
        fi
    done
    if [[ ! $OUI =~ / ]]; then
        >&2 echo " + Downloading OUI reference to ${OUI_PATHS[0]}/$OUI"
        curl "$CURL_OPTS" -o "${OUI_PATHS[0]}/$OUI" 2>/dev/null
        OUI="${OUI_PATHS[0]}/$OUI"
    fi
    echo "$OUI"
    return 0
}

function get_nameserver() {
    # Nameserver detection to resolve IP's to hostnames
    # Returns a nameserver IP
    local NS=''
    if [[ $(uname -s) =~ 'CYGWIN' ]]; then
        # Find a nameserver for PTR lookups
        NS=$(ipconfig /all | awk -F: '/DNS Servers/ {print $2}' 2>/dev/null \
            | sed 's/^\ //;s/\r$//')
    else
        NS=$(awk '/nameserver/ {print $2;exit;}' /etc/resolv.conf 2>/dev/null)
        if [[ "$NS" =~ 127\.0\.0 ]]; then
            # We're on a systemd box, try the default router instead?
            # 'G'ateway was probably our DHCP server, so try it for
            # local DNS service too.
            NS=$(netstat -rn | awk '/G\s/ {print $2}' 2>/dev/null)
        fi
    fi
    echo "$NS"
}

function parse_arp() {
    # Use process substitution here or we lose scope for arp_table()
    >&2 echo " + Parsing ARP table"
    if [[ $(uname -s) =~ 'CYGWIN' ]]; then
        while read -r ip mac smac; do
            arp_table+=("$ip $mac $smac")
        done < <(arp -a | awk --posix '/dynamic/ {
                split($2,n,/-/);
                printf "%s %s %02X-%02X-%02X\n",$1,$2,"0x" n[1],"0x" n[2],"0x" n[3]}' 2>/dev/null)
    elif [[ $(uname -s) =~ 'AIX' ]]; then
        while read -r ip mac smac; do
            arp_table+=("$ip $mac $smac")
        done < <(arp -an | awk '/ether/ {
                gsub(/[()]/,"");
                split($4,n,/:/);
                printf "%s %s %02X-%02X-%02X\n",$2,$4,("0x" n[1]),("0x" n[2]),("0x" n[3])}' 2>/dev/null)
    else
        while read -r ip mac smac; do
            arp_table+=("$ip $mac $smac")
        done < <(arp -en | awk --posix '/ether/ {
                split($3,n,/:/);
                printf "%s %s %02X-%02X-%02X\n",$1,$3,("0x" n[1]),("0x" n[2]),("0x" n[3])}' 2>/dev/null)
    fi
    if [[ ${#arp_table[@]} -eq 0 ]]; then
        return 1
    fi
}

function dns_lookup() {
    local NS
    NS=$(get_nameserver)
    # Create an associative array of IP to HOSTNAME
    # Use process substitution here or we lose scope for arp_table()
    >&2 echo " + Resolving IPs"
    while read -r ip name; do
        ip_to_name[$ip]="$name"
    done < <(for line in "${arp_table[@]}"; do
                echo " -x ${line%\ *} PTR"
            done | \
                dig +noall +answer +noedns @"$NS" -f- | \
                awk '{split($1,i,"."); print i[4]"."i[3]"."i[2]"."i[1],$NF}' 2>/dev/null)
    if [[ ${#ip_to_name[@]} -eq 0 ]]; then
        return 1
    fi
}

function vendor_lookup() {
    local OUI
    OUI=$(get_vendor_file)
    # Create an associative array of MAC to VENDOR
    # Use process substitution here or we lose scope for arp_table()
    >&2 echo " + Building OUI vendor lookup array"
    while read -r line; do
        smac_to_vendor[${line%|*}]="${line#*|}"
    done < <(awk -F'\t' '/(hex)/ {
            gsub(/\r/,"");
            split($1,mac,/ /);
            print mac[1]"|"$3}' "$OUI" 2>/dev/null | grep -v '^|$')
    if [[ ${#smac_to_vendor[@]} -eq 0 ]]; then
        return 1
    fi
}

# Is this system supported?
early_exit

# Reads the arp table into an array of (ip mac short_mac)
declare -a arp_table=()
parse_arp || die

# Creates associative array : ip_to_name[$ip]($name)
declare -A ip_to_name
dns_lookup || die

# Creates associative array :  smac_to_vendor[$smac]($vendor)
declare -A smac_to_vendor
vendor_lookup || die

IFS=$'\n' sorted=($(sort -t. -k1,1n -k2,2n -k3,3n -k4,4n <<<"${arp_table[*]}"))
printf '%-15s %-17s %-25s %s\n' "Address" "HWaddress" "Hostname" "Vendor"
for line in "${sorted[@]}"; do
    IFS=" " read -r ip mac smac <<< "$line"
    printf '%-15s %-17s %-25.25s %s\n' "$ip" "$mac" "${ip_to_name[$ip]}" "${smac_to_vendor[$smac]}"
done
